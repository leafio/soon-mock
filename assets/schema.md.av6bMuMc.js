import{_ as s,c as a,o as i,a3 as e,a8 as n}from"./chunks/framework.BbeggeaM.js";const g=JSON.parse('{"title":"Schema","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"schema.md","filePath":"schema.md"}'),l={name:"schema.md"},t=e('<h1 id="schema" tabindex="-1">Schema <a class="header-anchor" href="#schema" aria-label="Permalink to &quot;Schema&quot;">​</a></h1><p>There are two types of Data, Json Object <code>{}</code> , Json Array <code>[]</code>. Where generate apis , it would be deferent by the Data type.</p><p><img src="'+n+`" alt="截图" title="schema.png"></p><h2 id="schema-field" tabindex="-1">Schema Field <a class="header-anchor" href="#schema-field" aria-label="Permalink to &quot;Schema Field&quot;">​</a></h2><ul><li>Field Name</li><li>Data Type <ul><li>Basic : <code>string</code> <code>int</code> <code>number</code> <code>boolean</code> <code>object</code></li><li>Ref :Refer to another Schema or Schema Field</li><li>Generate by Json : generate a <code>object</code> sub fields by json</li></ul></li><li>Default Value : Would run this code if not give the filed value</li><li>Mock Data :Would run this code when batch generate Data.</li><li>Description: Some info to note the field</li></ul><h4 id="default-value-and-mock-data" tabindex="-1"><code>Default Value</code> and <code>Mock Data</code> <a class="header-anchor" href="#default-value-and-mock-data" aria-label="Permalink to &quot;\`Default Value\` and \`Mock Data\`&quot;">​</a></h4><p>Could write a single line js code</p><ul><li>Inner Function : <code>auto</code></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// auto increase , like 1 , 2 , 3 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// return a new uuid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// auto. stringId(prefix: string = &#39;&#39;, length?: number)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;soon-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// auto increase , like &#39;soon-0001&#39;,&#39;soon-0002&#39; , ...</span></span></code></pre></div><ul><li>Third Party Npm Lib <ul><li>@faker-js/faker (^8.3.1)</li><li>dayjs (^1.11.11)</li><li>mockjs (^1.1.0)</li></ul></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**faker */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// could use any locale , like fakerFR , fakerAR ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">faker.number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Chinese (Simplified)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fakerZH_CN.person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jobTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**dayjs */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dayjs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YYYY-MM-DD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**mockjs */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mockjs.Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,11),h=[t];function p(k,d,o,r,c,E){return i(),a("div",null,h)}const y=s(l,[["render",p]]);export{g as __pageData,y as default};
