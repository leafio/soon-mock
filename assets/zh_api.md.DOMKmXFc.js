import{_ as s,c as i,o as a,a3 as n,a4 as e}from"./chunks/framework.BbeggeaM.js";const y=JSON.parse('{"title":"API","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"zh/api.md","filePath":"zh/api.md"}'),t={name:"zh/api.md"},h=n('<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><p><img src="'+e+`" alt="截图" title="api.png"></p><h2 id="权限-authorization" tabindex="-1">权限 Authorization <a class="header-anchor" href="#权限-authorization" aria-label="Permalink to &quot;权限 Authorization&quot;">​</a></h2><p>可以启用权限，并设置该api的权限<code>code</code>,此<code>code</code>会传递至上述中间件中，然后进行验证。</p><h2 id="请求-request" tabindex="-1">请求 Request <a class="header-anchor" href="#请求-request" aria-label="Permalink to &quot;请求 Request&quot;">​</a></h2><ul><li><h3 id="url参数-params" tabindex="-1">url参数 Params <a class="header-anchor" href="#url参数-params" aria-label="Permalink to &quot;url参数 Params&quot;">​</a></h3> 输入类似 /:key 的字符串，会添加一个参数</li><li><h3 id="url查询参数-query" tabindex="-1">url查询参数 Query <a class="header-anchor" href="#url查询参数-query" aria-label="Permalink to &quot;url查询参数 Query&quot;">​</a></h3> 可以添加 <code>string</code> <code>number</code> <code>int</code> 或 对应数组 <code>array</code>的查询参数</li><li><h3 id="主体-body" tabindex="-1">主体 Body <a class="header-anchor" href="#主体-body" aria-label="Permalink to &quot;主体 Body&quot;">​</a></h3> 先输入 <code>字段名称</code>, 然后选择 <code>输入类型</code></li></ul><h2 id="操作-action" tabindex="-1">操作 Action <a class="header-anchor" href="#操作-action" aria-label="Permalink to &quot;操作 Action&quot;">​</a></h2><p><code>action</code>内的代码，对应 Express 的路由操作.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** action的代码运行于此 ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>显然, 你可使用<code>req</code>获取请求数据 ,使用<code>res</code>发送响应 下列函数会添加至 <code>res</code>下，,可在 Settings API 区域中设置</p><ul><li><code>res.success()</code> 发送成功响应</li><li><code>res.error()</code> 发送失败响应</li></ul><p>还有很多函数和<code>npm</code>包也可在此使用.</p><ul><li>内部函数 : <code>auto</code> (详情见 schema 章节中的描述)</li><li>内部函数 : <code>action</code> (是一个异步(async)函数 )</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** SchemaName 要替换成真实的 schema 名称 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取整个 schema 的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//写入替换 schema 的数据</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** 数组 JSON 可用的方法 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加单个记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过主键修改单个记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">del</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过主键删除单个记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过主键获取单个记录详情</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params:{page?: number; limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number} ) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取分页后的列表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any[]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 批量添加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any[]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 批量修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchDel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any[]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 批量删除</span></span></code></pre></div><ul><li>第三方 <code>npm</code> 库 <ul><li>@faker-js/faker (^8.3.1)</li><li>dayjs (^1.11.11)</li><li>mockjs (^1.1.0)</li><li>jsonwebtoken (^9.0.2)</li><li>svg-captcha (&quot;^1.4.0&quot;)</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建验证码图片</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> captcha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> svgCaptcha.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ignoreChars:&#39;abcdefghijklmnopqrstuvwxyz&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  charPreset: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0123456789&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  size: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  noise: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  background: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#f5f5f5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ img: captcha.data });</span></span></code></pre></div></li></ul><h2 id="响应-response" tabindex="-1">响应 Response <a class="header-anchor" href="#响应-response" aria-label="Permalink to &quot;响应 Response&quot;">​</a></h2><p>目前 ,此处的数据解构仅有展示作用，后续会添加生成 ts 调用的功能 .</p>`,17),l=[h];function p(k,r,d,E,c,o){return a(),i("div",null,l)}const u=s(t,[["render",p]]);export{y as __pageData,u as default};
