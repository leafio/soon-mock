import{_ as s,c as a,o as i,a3 as e,a4 as n}from"./chunks/framework.BbeggeaM.js";const g=JSON.parse('{"title":"API","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api.md","filePath":"api.md"}'),t={name:"api.md"},h=e('<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><p><img src="'+n+`" alt="截图" title="api.png"></p><h2 id="authorization" tabindex="-1">Authorization <a class="header-anchor" href="#authorization" aria-label="Permalink to &quot;Authorization&quot;">​</a></h2><p>You could enable and specialize a string here. The string would pass to the middleware. When it enables , this route would add the auth middleware which runs before the action. The auth middleware could be set in Settings API Section</p><h2 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;Request&quot;">​</a></h2><ul><li><h3 id="params" tabindex="-1">Params <a class="header-anchor" href="#params" aria-label="Permalink to &quot;Params&quot;">​</a></h3> Input in url like /:key will add a param key field</li><li><h3 id="query" tabindex="-1">Query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;Query&quot;">​</a></h3> Could add <code>string</code> <code>number</code> <code>int</code> and it&#39;s <code>array</code> field</li><li><h3 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;Body&quot;">​</a></h3> Should input <code>Field Name</code> first , then choose a <code>Data Type</code></li></ul><h2 id="action" tabindex="-1">Action <a class="header-anchor" href="#action" aria-label="Permalink to &quot;Action&quot;">​</a></h2><p>Just think your code is in an Express js Route.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** your code comes here ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Obviously, you could use <code>req</code> to get the Request data ,and use <code>res</code> to send the Response There two extra functions addon to <code>res</code>,which could be set in Settings API Section</p><ul><li><code>res.success()</code> to send a success response</li><li><code>res.error()</code> to send a fail response</li></ul><p>There are also many Functions and npm libs which can be used here.</p><ul><li>Inner Function : <code>auto</code> (same as schema chapter)</li><li>Inner Function : <code>action</code> (async function)</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** SchemaName should replaced with real schema name */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//read the schema data file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//save the schema data file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** array type data only */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// add an item append to schema data array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//update an item by primary field</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">del</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//delete an item by primary field</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//get an item by primary field</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params:{page?: number; limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number} ) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//get a paged list of schema data array</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any[]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// batch add items</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any[]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// batch update items</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    action.SchemaName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchDel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data:any[]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// batch del items</span></span></code></pre></div><ul><li>Third Party Npm Lib <ul><li>@faker-js/faker (^8.3.1)</li><li>dayjs (^1.11.11)</li><li>mockjs (^1.1.0)</li><li>jsonwebtoken (^9.0.2)</li><li>svg-captcha (&quot;^1.4.0&quot;)</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//create captcha</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> captcha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> svgCaptcha.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ignoreChars:&#39;abcdefghijklmnopqrstuvwxyz&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  charPreset: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0123456789&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  size: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  noise: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  background: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#f5f5f5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ img: captcha.data });</span></span></code></pre></div></li></ul><h2 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;Response&quot;">​</a></h2><p>At present ,it&#39;s only show what the response data structure is .</p>`,17),l=[h];function p(k,d,r,o,c,E){return i(),a("div",null,l)}const u=s(t,[["render",p]]);export{g as __pageData,u as default};
