import{_ as s,c as i,o as a,a3 as n,a8 as e}from"./chunks/framework.BbeggeaM.js";const u=JSON.parse('{"title":"Schema","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"zh/schema.md","filePath":"zh/schema.md"}'),l={name:"zh/schema.md"},t=n('<h1 id="schema" tabindex="-1">Schema <a class="header-anchor" href="#schema" aria-label="Permalink to &quot;Schema&quot;">​</a></h1><p>有2种类型的数据 (Data),Json键值对 (Json Object) <code>{}</code> , Json数组 (Json Array) <code>[]</code>. 当生成api时，会根据不同的类型，生成不同的api</p><p><img src="'+e+`" alt="截图" title="schema.png"></p><h2 id="模型字段" tabindex="-1">模型字段 <a class="header-anchor" href="#模型字段" aria-label="Permalink to &quot;模型字段&quot;">​</a></h2><ul><li>字段名称</li><li>数据类型 <ul><li>基本 : <code>string</code> <code>int</code> <code>number</code> <code>boolean</code> <code>object</code></li><li>引用 : 引用其他的<code>schema</code>，或其他<code>schema</code>的某个字段<code>field</code></li><li>由Json生成 : 根据json生成一个 <code>object</code> 的字段</li></ul></li><li>默认值 : 当添加数据时，对应的字段<code>field</code>没有值，则运行该处代码，生成默认值</li><li>模拟数据 :当批量添加模拟数据时，运行该处代码，填充对应字段值</li><li>描述: 一些备注信息</li></ul><h4 id="默认值与模拟数据" tabindex="-1"><code>默认值</code>与<code>模拟数据</code> <a class="header-anchor" href="#默认值与模拟数据" aria-label="Permalink to &quot;\`默认值\`与\`模拟数据\`&quot;">​</a></h4><p>可定义单行 js 代码</p><ul><li>内部函数 : <code>auto</code></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动增加 , 如 1 , 2 , 3 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成一个新的 uuid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// auto. stringId(prefix: string = &#39;&#39;, length?: number)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;soon-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动增加 , 如 &#39;soon-0001&#39;,&#39;soon-0002&#39; , ...</span></span></code></pre></div><ul><li>第三方<code>npm</code>库 <ul><li>@faker-js/faker (^8.3.1)</li><li>dayjs (^1.11.11)</li><li>mockjs (^1.1.0)</li></ul></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**faker */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可使用任意语言版本 , 如 fakerFR , fakerAR ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">faker.number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简体中文版</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fakerZH_CN.person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jobTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**dayjs */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dayjs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YYYY-MM-DD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**mockjs */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mockjs.Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,11),h=[t];function p(k,d,o,c,r,E){return a(),i("div",null,h)}const y=s(l,[["render",p]]);export{u as __pageData,y as default};
